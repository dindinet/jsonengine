#summary How to use query on jsonengine

== Example query ==

{{{
/GET /_q/myDoc?cond=name.eq.Foo
}}}

This query would return an array of JSON documents that satisfies:

  * docType is "myDoc".
  * "name" property equals to Foo.


{{{
/GET /_q/myDoc?cond=age.ge.20&cond=age.lt.60&sort=age.asc&limit=10
}}}

This query would return an array of JSON documents that satisfies:

  * docType is "myDoc".
  * "age" property is "greater than or equal to 20" *and* "less than 60".
  * Sorted by "age" property in ascending order.
  * Number of returned documents will be limited to 10.

  * HTTP Response
    * Status code 200: Exexuted the query successfully.
      * Response body: Array of JSON docs as a result of the query.
    * Status code 403: Access not authorized (see [HowToAdmin] for access control setting).
    * Status code 500: Caught an unexpected system error.

== Query URI format ==

You can issue simple queries on jsonengine with the following request format:

{{{
/GET /_q/<docType>[?<queryFilter>{&<queryFilter>}]
}}}

where `[`?`<`queryFilter`>``{`&`<`queryFilter`>``}``]` means you can write 0 or more `<`queryFilter`>` as query string on the URI. `<`queryFilter`>` is defined below.

{{{
<queryFilter> = <condFilter> | <sortFilter> | <limitFilter>

<condFilter> = 'cond=' <propertyName> '.' <comparator> '.' <propertyValue>
<comparator> = 'eq' | 'lt' | 'le' | 'gt' | 'ge' 
<propertyValue> = "<stringValue>" | <stringValue> | <numericValue> | 'true' | 'false'

<sortFilter> = 'sort=' <propertyName> '.' <sortOrder>
<sortOrder> = 'asc' | 'desc'

<limitFilter> = 'limit=' <integer>
}}}

== Notes ==

  * Multiple `<`condFilter`>`s will be combined with *logical AND* operation.
  * jsonengine checks if `<`propertyValue`>` can be converted to a numeric value at first. So if you want to pass a numeric value (such as "123") as a String, you need to wrap it with double quotations. e.g. cond=name.eq."123"
  * If you use only *"eq" comparator* in `<`condFilter`>`s, you can specify any number of `<`condFilter`>`s. e.g. cond=age.eq.10&cond=name.eq.Foo&cond=id.eq."001"&...
  * If you use either *`<`sortFilter`>`* or *inequality comparators* (lt, le, gt, ge), you can not specify more than one kind of `<`propertyName`>` in a query URI.
   * OK: cond=*age*.ge.20&cond=*age*.lt.30
   * Error: cond=*age*.ge.20&cond=*name*.eq.Foo
   * OK: cond=*age*.ge.20&sort=*age*.asc
   * Error: cond=*age*.ge.20&sort=*name*.asc
  * The parameter values should be URL encoded.