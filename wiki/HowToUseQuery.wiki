#summary How to use query on jsonengine

== Example query ==

{{{
/GET /_q/myDoc?cond=age.ge.20&cond=age.lt.60&sort=name.asc&limit=10
}}}

This query would return an array of JSON documents that satisfies:

  * docType is "myDoc".
  * "age" property is "greater than or equal to 20" *and* "less than 60".
  * Sorted by "name" property in ascending order.
  * Number of returned documents will be limited to 10.

== Query URI format ==

You can issue simple queries on jsonengine with the following request format:

{{{
/GET /_q/<docType>[?<queryFilter>{&<queryFilter>}]
}}}

where `[`?`<`queryFilter`>``{`&`<`queryFilter`>``}``]` means you can write 0 or more `<`queryFilter`>` as query string on the URI. `<`queryFilter`>` is defined below.

{{{
<queryFilter> = <condFilter> | <sortFilter> | <limitFilter>

<condFilter> = 'cond=' <propertyName> '.' <comparator> '.' <propertyValue>
<comparator> = 'eq' | 'lt' | 'le' | 'gt' | 'ge' 

<sortFilter> = 'sort=' <propertyName> '.' <sortOrder>
<sortOrder> = 'asc' | 'desc'

<limitFilter> = 'limit=' <integer>
}}}

== Notes ==

  * Multiple `<`condFilter`>`s will be combined with *logical AND* operation.
  * If you use only *"eq" comparator* in `<`condFilter`>`s, you can specify any number of `<`condFilter`>`s. e.g. "cond=age.eq.10&cond=name.eq.Foo&cond=id.eq.001&..."
  * If you use *inequality comparators* (lt, le, gt, ge) in `<`condFilter`>`s, you can specify *only one* kind of `<`propertyName`>` in one query URI. e.g. You can not do "cond=*age*.ge.20&cond=*name*.eq.Foo"
  * You may put `<`sortFilter`>` only once. You can choose any property name as the sort criteria.
  * You may put `<`limitFilter`>` only once.
  * The whole URI should be URL encoded.