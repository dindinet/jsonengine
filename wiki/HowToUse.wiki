#summary How to use jsonengine

== REST API ==

jsonengine provides REST API described below for creating, reading, updating and deleting JSON documents.

=== POST/PUT ===

To create or update a JSON document, you can use POST or PUT HTTP method with "doc" parameter (there is no difference on behavior between the two methods).

{{{
/POST /_je/<docType>
}}}

{{{
/PUT /_je/<docType>
}}}

  * HTTP Request URI values
    * *docType* (required): DocType (document type) of the JSON doc.
      * Similar to table name or class name. For example, "address" docType may be for saving an address info JSON doc. 

  * HTTP Request parameters
    * *doc* (required): JSON doc to be created/updated.
      * The JSON doc should be URL encoded.
      * If this JSON doc has a `_`docId property, jsonengine will try to update the existing JSON doc. If not found, create and save a new JSON doc.
      * If this JSON doc has no `_`docId property, jsonengine will create and save a new JSON doc. 
      * If a new JSON doc has created, client can retrieve a auto-generated `_`docId property for it from the result JSON doc.
    * *cc* (optional): set "true" if you need checking update conflict. See "Update conflict detection" section below.

  * HTTP Response
    * Status code 200: Created or updated the JSON doc successfully.
      * Response body: updated JSON doc includes `_`docId and `_`updatedAt property generated by jsonengine.
    * Status code 409: Detected update conflict.
    * Status code 500: Caught an unexpected system error.

=== GET ===

To get an existing JSON document, you can use GET method.

{{{
/GET /_je/<docType>/<docId>
}}}

  * HTTP Request URI values
    * *docType* (required): DocType (document type) of the JSON doc. 
    * *docId* (required): DocID (document id) of the JSON doc to be retrieved.

  * HTTP Request parameters
    * *cc* (optional): set "true" if you need checking update conflict. See "Update conflict detection" section below.
    * *doc* (optional): JSON doc for checking the update conflict.
      * Use this parameter in conjunction with *cc* parameter.
      * The JSON doc should be URL encoded.

  * HTTP Response
    * Status code 200: Retrieved the JSON doc successfully.
      * Response body: retrived JSON doc.
    * Status code 404: If there is no such JSON doc stored in jsonengine.
    * Status code 500: Caught an unexpected system error.

=== DELETE ===

To delete an existing JSON document, you can use DELETE HTTP method, or POST method with "delete=true" parameter.

{{{
/DELETE /_je/<docType>/<docId>
}}}

{{{
/POST /_je/<docType>/<docId>
}}}

  * HTTP Request URI values
    * *docType* (required): DocType (document type) of the JSON doc. 
    * *docId* (required): DocID (document id) of the JSON doc to be deleted.

  * HTTP Request parameters
    * *delete* (optional) : set "true" if client need to delete the JSON doc with POST method.
    * *cc* (optional): set "true" if client need checking update conflict. See "Update conflict detection" section below.
    * *doc* (optional): JSON doc for checking the update conflict.
      * Use this parameter in conjunction with *cc* parameter.
      * The JSON doc should be URL encoded.

  * HTTP Response
    * Status code 200: Deleted the JSON doc successfully.
      * Response body: empty.
    * Status code 404: If there is no such JSON doc stored in jsonengine.
    * Status code 409: Detected update conflict.
    * Status code 500: Caught an unexpected system error.

=== Update conflict detection ===

jsonengine provides an "update conflict detection" as an optional feature. A client may set "cc" parameter to true on POST/PUT/GET/DELETE methods along with "doc" parameter set to the latest JSON doc the client has. Then jsonengine will compare the `_`updatedAt property value between the JSON doc passed from client and the JSON doc stored in jsonengine. If the latter is newer, it means some other client has updated the JSON doc already and the client's JSON doc is not the latest anymore. jsonengine will return Status code 409 (Conflict) without updating it so that client may get the latest JSON doc again and let user retry the update. In this way the web application can maintain data integrity across the service (a.k.a. optimistic concurrency control).

== JSON Document Format ==

jsonengine can handle arbitrary JSON documents with the features below.

  * Schemaless: even though you need to specify the DocType when you store a JSON doc on jsonengine, each JSON doc can have different schema (DocType is just a "tag" for grouping JSON docs and it does not represent any fixed schema).
  * Nested: You can let JSON doc having children or grand-children JSON docs. But only the top-level literal properties can be used as filtering/sorting condition on query.

=== Restrictions ===

  * JSON doc size: because of the restriction of App Engine, a JSON document should be smaller than 1MB.
  * Indexed property size: any properties with literal value (i.e. string, boolean and number) will be added to the jsonengine's internal index automatically, so that the document can be filtered or sorted by the property on queries. The size of the indexed property (= the property name length + property value length) should be less than 500 characters. If you want to store property value longer than 500 characters, you need to exclude the property from index by putting "`_`" on the property name as described below.

=== Special properties ===

The following properties are handled specially in jsonengine and client may not modify those values (except for the `_`<any property name>).

  * *`_`docId*: an unique ID of each JSON document. 
  * *`_`updatedAt*: a long value of timestamp when the JSON document has been updated.
  * *`_`<any property name>*: if you put any property name starts with "`_`", the property will not be added to the index.
  * These rules will not be applied to any child JSON documents.