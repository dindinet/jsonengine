#summary How to use jsonengine

= NOTE: THIS API HAS BEEN UPDATED AND NOT IMPLEMENTED YET. PLEASE WAIT A WHILE =

== REST API ==

jsonengine provides REST API described below for creating, reading, updating and deleting JSON documents. Client can use the API in a RESTful way (e.g. using GET/POST/PUT/DELETE HTTP methods) but can also use only GET and POST for accessing the all features (this would be useful for Flash client).

== Saving a JSON document to the Datastore ==

=== POST Example ===

You can save a JSON doc on the Datastore with one of the following styles. Both of them stores a JSON doc {"name":"Foo",age:20}.

  * FORM parameter style
    * POST /`_`je/myDoc?name=Foo&age=20

  * JSON doc style
    * POST /`_`je/myDoc?`_`doc={"name":"Foo",age:20}

  * Response (for status code 200):
    * {"name":"Foo",age:20,`_`docId:"kzlQxBmFhuOLneBQMdvLR5jjGktR8KG8",`_`updatedAt:1266738290619, ... }

=== POST/PUT syntax ===

To create or update a JSON document, you can use POST or PUT HTTP method with "doc" parameter (there is no difference on behavior between the two methods).

{{{
/POST /_je/<docType>
}}}

{{{
/PUT /_je/<docType>
}}}

  * HTTP Request URI values
    * *docType* (required): docType (document type) of the JSON doc.
      * Similar to table name or class name. For example, "address" docType may be for saving an address info JSON doc. 

You can save a JSON doc with one of the following parameter styles:

  * HTTP Request parameters (FORM parameter style)
    * *<any property names>*: You can put any pairs of property names and values. They will be saved as properties of a JSON doc.
      * If you provide multiple property values with a same name, the values will be stored in an array in a JSON doc.
    * *`_`docId* (optional): docId of the JSON doc to be created/updated (see the following docId notes).
    * *`_`noUpdatesAfter* (optional): set the value of `_`updatedAt property of the client-side copy of the JSON doc to check update conflict. See "Update conflict detection" section below for details.
    * Restrictions: please use JSON doc style to avoid the following restrictions.
      * jsonengine will try to parse each parameter value as 1) a number, 2) a boolean and then 3) a string. If you want to specify exact types of properties, please use JSON doc style.
      * You can not use property names starting with `_`.

  * HTTP Request parameters (JSON doc style)
    * *`_`doc* (required): JSON doc to be created/updated.
      * You may include `_`docId property in the JSON doc to create/update it with the specified docId (see the following docId notes).
      * The JSON doc should be URL encoded.
    * *`_`noUpdatesAfter* (optional): set the value of `_`updatedAt property of the client-side copy of the JSON doc to check update conflict. See "Update conflict detection" section below for details.

  * HTTP Response
    * Status code 200: Created or updated the JSON doc successfully.
      * Response body: updated JSON doc includes `_`docId and `_`updatedAt property generated by jsonengine.
    * Status code 409: Detected update conflict.
    * Status code 500: Caught an unexpected system error.

  * Notes on "docId" of the JSON doc
    * The client can provide `_`docId property via `_`docId parameter (in the FORM parameter style) or `_`docId property (in the JSON doc style).
    * If the client provides a `_`docId property jsonengine will try to update the existing JSON doc. If not found, create and save a new JSON doc.
    * If the client does not provides a `_`docId property, jsonengine will create and save a new JSON doc. 
      * An auto-generated `_`docId can be retrived from the result JSON doc.

== Getting a JSON document from the Datastore ==

=== GET Example ===

The following GET request gets a JSON doc from the Datastore.

  * GET /`_`je/myDoc/kzlQxBmFhuOLneBQMdvLR5jjGktR8KG8

  * Response (for status code 200):
    * {"name":"Foo",age:20,`_`docId:"kzlQxBmFhuOLneBQMdvLR5jjGktR8KG8",`_`updatedAt:1266738290619, ... }

=== GET syntax ===

To get an existing JSON document, you can use GET method.

{{{
/GET /_je/<docType>/<docId>
}}}

  * HTTP Request URI values
    * *docType* (required): docType (document type) of the JSON doc. 
    * *docId* (required): docID (document id) of the JSON doc to be retrieved.

  * HTTP Request parameters
    * None.

  * HTTP Response
    * Status code 200: Retrieved the JSON doc successfully.
      * Response body: retrived JSON doc.
    * Status code 404: If there is no such JSON doc stored in jsonengine.
    * Status code 500: Caught an unexpected system error.

== Deleting a JSON document from the Datastore ==

=== DELETE example ===

These following POST requests are same: both removes the JSON doc from the Datastore.

  * POST /`_`je/myDoc/kzlQxBmFhuOLneBQMdvLR5jjGktR8KG8?`_`delete=true
  * DELETE /`_`je/myDoc/kzlQxBmFhuOLneBQMdvLR5jjGktR8KG8

  * Response (for status code 200):
    * None.

=== DELETE syntax ===

To delete an existing JSON document, you can use DELETE HTTP method, or POST method with "delete=true" parameter.

{{{
/DELETE /_je/<docType>/<docId>
}}}

{{{
/POST /_je/<docType>/<docId>
}}}

  * HTTP Request URI values
    * *docType* (required): docType (document type) of the JSON doc. 
    * *docId* (required): docID (document id) of the JSON doc to be deleted.

  * HTTP Request parameters
    * *`_`delete* (optional) : set "true" if client need to delete the JSON doc with POST method.
    * *`_`noUpdatesAfter* (optional): set the value of `_`updatedAt property of the client-side copy of the JSON doc to check update conflict. See "Update conflict detection" section below for details.

  * HTTP Response
    * Status code 200: Deleted the JSON doc successfully.
      * Response body: empty.
    * Status code 404: If there is no such JSON doc stored in jsonengine.
    * Status code 409: Detected update conflict.
    * Status code 500: Caught an unexpected system error.

== Update conflict detection ==

jsonengine provides an "update conflict detection" as an optional feature. A client may set "`_`noUpdatesAfter" parameter to the `_`updatedAt value of the client-side copy of the JSON doc on POST/PUT/DELETE methods. Then jsonengine will compare it with the `_`updatedAt property value of the JSON doc stored in jsonengine. If the latter is newer, it means some other client has updated the JSON doc already and the client's JSON doc is not the latest anymore. jsonengine will return Status code 409 (Conflict) without updating it so that client may get the latest JSON doc again and let user retry the update. In this way the web application can maintain data integrity across the service (a.k.a. optimistic concurrency control).

== JSON Document Format ==

jsonengine can handle arbitrary JSON documents with the features below.

  * Schemaless: even though you need to specify the docType when you store a JSON doc on jsonengine, each JSON doc can have different schema. A docType is just a "tag" for grouping JSON docs and it does not represent any fixed schema.
  * Nested: You can let JSON doc having children or grand-children JSON docs. But only the top-level literal properties can be used as filtering/sorting condition on query.

=== Restrictions ===

  * JSON doc size: because of the restriction of App Engine, a JSON document should be smaller than 1MB.
  * Indexed property size: any properties with literal value (i.e. string, boolean and number) will be added to the jsonengine's internal index automatically, so that the document can be filtered or sorted by the property on queries. The size of the indexed property (= the property name length + property value length) should be less than 500 characters. If you want to store property value longer than 500 characters, you need to exclude the property from index by putting "`_`" on the property name as described below.

=== Special properties ===

The following properties are handled specially in jsonengine and client may not modify those values (except for the `_`<any property name>).

  * *`_`docId*: an unique ID of each JSON document.
  * *`_`createdAt*: a long value of timestamp when the JSON document has been created.
  * *`_`createdBy*: An user ID of the person created the JSON document.
  * *`_`updatedAt*: a long value of timestamp when the JSON document has been updated.
  * *`_`updatedBy*: An user ID of the person updatedthe JSON document.
  * *`_`<any property name>*: if you put any property name starts with "`_`", the property will not be added to the index.
  * These rules will not be applied to any child JSON documents.