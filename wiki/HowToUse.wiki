#summary How to use jsonengine

== REST API ==

jsonengine provides REST API described below for creating, reading, updating and deleting JSON documents. Client can use the API in a RESTful way (e.g. using GET/POST/PUT/DELETE HTTP methods) but can also use only GET and POST for accessing the all features (this would be useful for Flash client).

== Saving a JSON document to the Datastore ==

=== POST Example ===

You can save a JSON doc on the Datastore with one of the following styles. Both of them stores a JSON doc {"name":"Foo",age:20}.

  * FORM parameter style
    * POST /`_`je/myDoc?name=Foo&age=20

  * JSON doc style
    * POST /`_`je/myDoc?`_`doc={"name":"Foo",age:20}

  * Response (for status code 200):
    * {"name":"Foo",age:20,`_`docId:"kzlQxBmFhuOLneBQMdvLR5jjGktR8KG8",`_`updatedAt:1266738290619, ... }

=== POST/PUT syntax ===

To create or update a JSON document, you can use POST or PUT HTTP method with "doc" parameter (there is no difference on behavior between the two methods).

{{{
/POST /_je/<docType>
}}}

{{{
/PUT /_je/<docType>
}}}

  * HTTP Request URI values
    * *docType* (required): docType (document type) of the JSON doc.
      * Similar to table name or class name. For example, "address" docType may be for saving an address info JSON doc. 

You can save a JSON doc with one of the following parameter styles:

  * HTTP Request parameters (FORM parameter style)
    * *<any parameters>*: You can put any pairs of parameter name and value. They will be saved as properties of a JSON doc.
      * jsonengine will try to parse each parameter value as 1) a long number, 2) a double number, 3) a boolean and then 4) a string. So please be careful that strings like "001" or "true" will not be stored as String. If you want to specify exact types of properties to avoid it, please use JSON doc style.
      * If you provide multiple property values with a same name, the values will be stored in an array in a JSON doc.
      * You can not use property names starting with `_` in this style.
    * *`_`docId* (optional): docId of the JSON doc to be created/updated (see the following docId notes).
    * *`_`checkUpdatesAfter* (optional): set the value of `_`updatedAt property of the client-side copy of the JSON doc to check update conflict. See "Update conflict detection" section below for details.

  * HTTP Request parameters (JSON doc style)
    * *`_`doc* (required): JSON doc to be created/updated.
      * You may include `_`docId property in the JSON doc to create/update it with the specified docId (see the following docId notes).
      * The JSON doc should be URL encoded.
    * *`_`checkUpdatesAfter* (optional): set the value of `_`updatedAt property of the client-side copy of the JSON doc to check update conflict. See "Update conflict detection" section below for details.

  * HTTP Response
    * Status code 200: Created or updated the JSON doc successfully.
      * Response body: updated JSON doc includes the generated properties (see below) like `_`docId, `_`createdAt and `_`createdBy.
    * Status code 403: Access not authorized (see [HowToAdmin] for access control setting).
    * Status code 409: Detected update conflict.
    * Status code 500: Caught an unexpected system error.

  * Notes on "docId" of the JSON doc
    * The client can provide `_`docId property via `_`docId parameter (in the FORM parameter style) or `_`docId property (in the JSON doc style).
    * If the client provides a `_`docId property, jsonengine will try to update the existing JSON doc. If not found, create and save a new JSON doc.
    * If the client does not provides a `_`docId property, jsonengine will create and save a new JSON doc. 
      * An auto-generated `_`docId can be retrived from the result JSON doc.

== Getting a JSON document from the Datastore ==

=== GET Example ===

The following GET request gets a JSON doc from the Datastore.

  * GET /`_`je/myDoc/kzlQxBmFhuOLneBQMdvLR5jjGktR8KG8

  * Response (for status code 200):
    * {"name":"Foo",age:20,`_`docId:"kzlQxBmFhuOLneBQMdvLR5jjGktR8KG8",`_`updatedAt:1266738290619, ... }

=== GET syntax ===

To get an existing JSON document, you can use GET method.

{{{
/GET /_je/<docType>/<docId>
}}}

  * HTTP Request URI values
    * *docType* (required): docType (document type) of the JSON doc. 
    * *docId* (required): docID (document id) of the JSON doc to be retrieved.

  * HTTP Request parameters
    * None.

  * HTTP Response
    * Status code 200: Retrieved the JSON doc successfully.
      * Response body: retrived JSON doc.
    * Status code 403: Access not authorized (see [HowToAdmin] for access control setting).
    * Status code 404: If there is no such JSON doc stored in jsonengine.
    * Status code 500: Caught an unexpected system error.

== Deleting a JSON document from the Datastore ==

=== DELETE example ===

These following POST requests are same: both removes the JSON doc from the Datastore.

  * POST /`_`je/myDoc/kzlQxBmFhuOLneBQMdvLR5jjGktR8KG8?`_`delete=true
  * DELETE /`_`je/myDoc/kzlQxBmFhuOLneBQMdvLR5jjGktR8KG8

  * Response (for status code 200):
    * None.

=== DELETE syntax ===

To delete an existing JSON document, you can use DELETE HTTP method, or POST method with "`_`delete=true" parameter. You can delete all JSON docs under a docType by omitting `<`docId`>`.

{{{
/DELETE /_je/<docType>/<docId>
}}}

{{{
/POST /_je/<docType>/<docId>?_delete=true
}}}

  * HTTP Request URI values
    * *docType* (required): docType (document type) of the JSON doc. 
    * *docId* (optional): docID (document id) of the JSON doc to be deleted. By omitting this, you can delete all the JSON docs under the docType. Please note that this will be processed in background and may take a while if there are many JSON docs to delete.

  * HTTP Request parameters
    * *`_`delete* (optional) : set "true" if client need to delete the JSON doc with POST method.
    * *`_`checkUpdatesAfter* (optional): set the value of `_`updatedAt property of the client-side copy of the JSON doc to check update conflict. See "Update conflict detection" section below for details.

  * HTTP Response
    * Status code 200: Deleted the JSON doc successfully.
      * Response body: empty.
    * Status code 403: Access not authorized (see [HowToAdmin] for access control setting).
    * Status code 404: If there is no such JSON doc stored in jsonengine.
    * Status code 409: Detected update conflict.
    * Status code 500: Caught an unexpected system error.

== Update conflict detection ==

jsonengine provides an "update conflict detection" as an optional feature. A client may set "`_`checkUpdatesAfter" parameter to the `_`updatedAt value of the client-side copy of the JSON doc on POST/PUT/DELETE methods. Then jsonengine will compare it with the `_`updatedAt property value of the JSON doc stored in jsonengine. If the latter is newer, it means some other client has updated the JSON doc already and the client's JSON doc is not the latest anymore. jsonengine will return Status code 409 (Conflict) without updating it so that client may get the latest JSON doc again and let user retry the update. In this way the web application can maintain data integrity across the service (a.k.a. optimistic concurrency control).

== JSON Document Format ==

jsonengine can handle arbitrary JSON documents with the features below.

  * Schemaless: even though you need to specify the docType when you store a JSON doc on jsonengine, each JSON doc can have different schema. A docType is just a "tag" for grouping JSON docs and it does not represent any fixed schema.
  * Nested: You can let JSON doc having children or grand-children JSON docs. But only the top-level literal properties can be used as filtering/sorting condition on query.

=== Restrictions ===

  * JSON doc size `<` 1MB: Because of the restriction of App Engine, a JSON doc should be smaller than 1MB.
  * Indexed property size `<` 500 chars: Any properties with literal value (i.e. string, boolean and number) will be added to the jsonengine's internal index automatically, so that the document can be filtered or sorted by the property on queries. 
    * The size of the indexed property (= the property name length + property value length) should be less than 500 characters. 
    * By adding "`_`" prefix to the property name (e.g. `_`foo), it will be excluded from the index and you can store more than 500 chars to it.

=== Generated properties ===

The following properties are generated by jsonengine automatically and client must not modify those values. You can use generated properties as a filtering or sorting condition on query.

  * *`_`docId*: an unique ID of each JSON document.
  * *`_`createdAt*: a long value of timestamp when the JSON document has been created.
  * *`_`createdBy*: An user ID of the person created the JSON document.
  * *`_`updatedAt*: a long value of timestamp when the JSON document has been updated.
  * *`_`updatedBy*: An user ID of the person updatedthe JSON document.